import aiohttp
import asyncio
import requests
import pandas as pd
from datetime import datetime
import itertools


lista_brojeva = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 51, 52, 53, 54, 55, 56, 57, 58, 59, 67, 68, 69, 70, 71, 72, 73, 82, 83, 84, 85, 86, 95, 96, 97, 106, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 349, 350, 351, 352, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 379, 380, 381, 382, 388, 389, 390, 392, 397, 398, 399, 400, 401, 402, 403, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 453, 467, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 505, 506, 507, 508, 511, 512, 514, 515, 526, 528, 532, 533, 536, 537, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 623, 624, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 654, 655, 656, 657, 658, 659, 701, 702, 703, 753, 754, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 792, 794, 799, 801, 806, 808, 809, 811, 812, 814, 817, 821, 825, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 862, 863, 864, 50002, 50003, 50053, 50054, 50055, 50056, 50057, 50058, 50059, 50060, 50061, 50062, 50067, 50068, 50069, 50071, 50072, 50073, 50074, 50075, 50091, 50092, 50094, 50095, 50096, 50097, 50110, 50111, 50112, 50113, 50116, 50117, 50124, 50125, 50128, 50129, 50132, 50133, 50136, 50137, 50138, 50188, 50189, 50190, 50191, 50192, 50193, 50194, 50195, 50200, 50201, 50202, 50203, 50204, 50205, 50206, 50207, 50208, 50209, 50210, 50211, 50212, 50213, 50214, 50215, 50216, 50217, 50218, 50219, 50220, 50221, 50222, 50223, 50224, 50225, 50226, 50227, 50228, 50229, 50230, 50231, 50232, 50233, 50234, 50235, 50236, 50237, 50238, 50239, 50240, 50241, 50242, 50243, 50244, 50245, 50246, 50247, 50248, 50249, 50250, 50251, 50252, 50254, 50255, 50256, 50257, 50258, 50259, 50261, 50262, 50264, 50265, 50266, 50267, 50268, 50269, 50270, 50271, 50272, 50273, 50275, 50276, 50277, 50278, 50279, 50280, 50281, 50282, 50294, 50295, 50310, 50311, 50313, 50314, 50331, 50332, 50333, 50334, 50335, 50336, 50337, 50338, 50339, 50340, 50341, 50342, 50343, 50344, 50345, 50346, 50347, 50348, 50349, 50350, 50355, 50356, 50357, 50358, 50359, 50360, 50365, 50366, 50367, 50368, 50369, 50370, 50371, 50372, 50373, 50374, 50377, 50378, 50379, 50380, 50381, 50382, 50383, 50384, 50385, 50386, 50387, 50388, 50389, 50390, 50391, 50392, 50393, 50394, 50395, 50400, 50401, 50402, 50403, 50404, 50405, 50406, 50407, 50408, 50409, 50410, 50411, 50412, 50413, 50414, 50415, 50416, 50417, 50418, 50419, 50420, 50421, 50474, 50475, 50476, 50477, 50589, 50590, 50591, 50592, 50593, 50611, 50612, 50613, 50614, 50615, 50616, 50617, 50618, 50628, 50630, 50661, 50662, 50666, 50667, 50668, 50676, 50677, 50678, 50679, 50680, 50681, 50682, 50683, 50684, 50685, 50686, 50687, 50688, 50689, 50690, 50691, 50692, 50693, 50694, 50695, 50696, 50697, 50698, 50699, 50700, 50701, 50702, 50703, 50704, 50705, 50706, 50707, 50708, 50709, 50710, 50711, 50712, 50713, 50714, 50715, 50716, 50717, 50718, 50719, 50720, 50721, 50722, 50723, 50724, 50725, 50726, 50727, 50728, 50729, 50730, 50731, 50732, 50733, 50734, 50739, 50740, 50741, 50742, 50743, 50744, 50816, 50817, 50850, 50851, 50872, 50873, 50874, 50875, 50879, 50880, 50881, 50903, 50904, 50915, 50916, 50917, 50918, 50919, 50920, 50921, 50922, 50923, 50924, 50925, 50926, 50927, 50928, 50929, 50930, 50931, 50993, 50994, 50995, 51064, 51065, 51070, 51071, 51072, 51073, 51074, 51075, 51076, 51077, 51078, 51079, 51080, 51081, 51082, 51083, 51084, 51085, 51092, 51093, 51094, 51095, 51096, 51097, 51102, 51103, 51104, 51105, 51106, 51107, 51108, 51109, 51110, 51111, 51126, 51127, 51128, 51129, 51130, 51131, 51132, 51133, 51134, 51135, 51136, 51137, 51138, 51139, 51140, 51141, 51142, 51143, 51144, 51145, 51226, 51227, 51242, 51243, 51298, 51299, 51300, 51301, 51302, 51303, 51304, 51305, 51306, 51307, 51308, 51309, 51310, 51311, 51312, 51313, 51314, 51315, 51396, 51397, 51398, 51399, 51400, 51401, 51402, 51403, 51404, 51405, 51406, 51407, 51408, 51409, 51410, 51411, 51412, 51413, 51414, 51415, 51416, 51417, 51418, 51419, 51420, 51421, 51422, 51423, 51424, 51425, 51426, 51427, 51428, 51429, 51430, 51551, 51553, 51558, 51559, 51560, 51563, 51564, 51568, 51571, 51572, 51573, 51574, 51621, 51622, 51623, 51659, 51661, 51666, 51667, 51668, 51669, 51670, 51671, 51672, 51673, 51674, 51675, 51693, 51694, 51695, 51696, 51697, 51698, 51699, 51700, 51701, 51702, 51703, 51704, 51705, 51706, 51707, 51708, 51709, 51710, 51711, 51712, 51713, 51714, 51715, 51716, 51717, 51718, 51719, 51720, 51721, 51722, 51723, 51724, 51725, 51726, 51727, 51728, 51729, 51730, 51731, 51732, 51733, 51734, 51735, 51736, 51737, 51738, 51739, 51740, 51741, 51742, 51743, 51744, 51745, 51746, 51747, 51752, 51753, 51754, 51755, 51756, 51757, 51758, 51759, 51760, 51770, 51771, 51772, 51784, 51785, 52899, 52900, 52901, 52902, 52903, 52904, 52910, 52911, 52912, 52913, 52914, 52915, 52916, 52917, 52918, 52919, 52920, 52921, 52922, 52923, 52924, 52925, 52926, 52927, 52928, 52929, 52930, 52931, 52932, 52933, 52934, 52935, 52938, 52939, 52942, 52943, 52944, 52945, 52946, 52947, 52948, 52949, 52950, 53171, 53172, 53173, 53174, 53175, 53176, 53197, 53329, 53332, 53333, 53334, 53335, 53336, 53337, 53338, 53339, 53877, 53878, 53903, 53904, 53917, 53918, 53967, 53968, 53971, 53972, 53980, 53981, 53982, 53983, 53984, 53985, 53986, 53987, 53988, 53989, 53990, 53991, 53992, 53993, 53994, 53995, 53996, 53997, 53998, 53999, 54000, 54001, 54002, 54003, 54004, 54005, 54006, 54007, 54008, 54009, 54010, 54011, 54012, 54013, 54014, 54015, 54016, 54017, 54018, 54019, 54020, 54021, 54022, 54023, 54024, 54025, 54030, 54031, 54244, 54245, 54246, 54247, 54248, 54249, 54250, 54251, 54252, 54253, 54254, 54255, 54256, 54257, 54258, 54259, 54260, 54261, 54262, 54263, 54264, 54265, 54266, 54267, 54268, 54269, 54270, 54271, 54272, 54274, 54275, 54276, 54277, 54278, 54279, 54280, 54281, 54282, 54283, 54284, 54285, 55139, 55140, 55141, 55142, 55143, 55144, 55145, 55146, 55147, 55148, 55149, 55150, 55151, 55152, 55153, 55154, 55155, 55156, 55157, 55158, 55159, 55160, 55161, 55162, 55163, 55164, 55165, 55166, 55167, 55168, 55169, 55170, 55171, 55172, 55173, 55174, 55175, 55176, 55177, 55178, 55180, 55181, 55182, 55184, 55185, 55186, 55187, 55188, 55189, 55190, 55191, 55192, 55193, 55194, 55195, 55196, 55197, 55198, 55199, 55200, 55201, 55202, 55203, 55204, 55205, 55206, 55347, 55348, 55349, 55350, 55351, 55352, 55353, 55354, 55355, 55356, 55357, 55373, 55701, 56081, 56082, 56093, 56094, 56099, 56100, 56129, 56130, 200041, 200042, 200045, 200046, 200049, 200050, 200051, 200052, 200053, 200054, 200055, 200056, 200274, 200275, 200276, 200277, 200278, 200279, 200280, 200281, 200282, 200283, 200284, 200285, 200286, 200287, 200288, 200289, 200290, 200291, 200292, 200293, 200294, 200295, 200296, 200297, 200298, 200299, 200300, 200301, 200302, 200303, 200304, 200465, 200466, 200467, 200468, 200586, 200587, 200588, 200589, 200608, 200609, 200610, 200611, 200612, 200613, 200614, 200615, 200616, 200617, 200640, 200641, 200642, 200682, 200683, 200684, 200685, 200696, 200697, 200698, 200699, 200700, 200701, 200702, 200703, 200704, 200705, 200706, 200707, 200708, 200709, 200710, 200711, 200712, 200713, 200714, 200715, 200716, 200717, 200718, 200719, 200720, 200721, 200722, 200723, 200724, 200725, 200726, 200727, 200728, 200729, 200730, 200731, 200732, 200733, 200734, 200735, 200736, 200737, 200738, 200751, 200752, 200753, 200778, 200779, 200780, 200781, 200782, 200783, 200784, 200785, 200786, 200787, 200791, 200792, 200793, 200794, 200795, 200796, 200797, 200798, 200801, 200802, 200807, 200808, 200809, 200810, 200811, 200824, 200825, 200826, 200827, 200828, 200829, 200830, 200831, 200832, 200833, 200834, 200835, 200836, 200837, 200838, 200839, 200840, 200841, 200842, 200843, 200844, 200845, 200846, 200847, 200848, 200849, 200850, 200851, 200852, 200853, 200854, 200855, 200856, 200857, 200858, 200859, 200860, 200861, 200862, 200866, 200867, 200868, 200869, 200870, 200897, 200898, 200899, 200900, 200904, 200905, 200906, 200907, 200908, 200930, 200931, 200932, 200933]

url = 'https://www.oktagonbet.com/restapi/offer/sr/sport/S/mob'
headerss = {
    'accept': 'application/json, text/plain, */*',
    'accept-language': 'en-US,en;q=0.9,bs;q=0.8',
    'cookie': 'org.springframework.web.servlet.i18n.CookieLocaleResolver.LOCALE=sr',
    'priority': 'u=1, i',
    'referer': 'https://www.oktagonbet.com/mob/sr/sportsko-kladjenje/fudbal/S',
    'sec-ch-ua': '"Not/A)Brand";v="8", "Chromium";v="126", "Google Chrome";v="126"',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-platform': '"Linux"',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'same-origin',
    'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36'
}
params = {
    'annex': '1',
    'hours': '72',
    'mobileVersion': '2.33',
    'locale': 'sr'
}

def fetch_match_ids():
    response = requests.get(url, headers=headerss)
    data = response.json()
    return [match.get('id') for match in data.get('esMatches', [])]

async def fetch_and_process(session, match_id, keys):
    url = f'https://www.oktagonbet.com/restapi/offer/sr/match/{match_id}?annex=1&mobileVersion=2.33.5.4&locale=sr'
    headers = {
        'accept': 'application/json, text/plain, */*',
        'accept-language': 'en-US,en;q=0.9,bs;q=0.8,sr;q=0.7',
        'cookie': 'org.springframework.web.servlet.i18n.CookieLocaleResolver.LOCALE=sr',
        'priority': 'u=1, i',
        'referer': 'https://www.oktagonbet.com/mob/sr/sportsko-kladjenje/fudbal/S/argentina-1/2239121/special/godoy-cruz-v-sarmiento/39310367',
        'sec-ch-ua': '"Chromium";v="128", "Not;A=Brand";v="24", "Google Chrome";v="128"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Linux"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-origin',
        'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36'
    }
    timeout = aiohttp.ClientTimeout(total=20)

    try:
        async with session.get(url, headers=headers, timeout=timeout) as response:
            result = await response.json()
            match_info = {}
            if result:
                match_id = result.get('id')
                kick_off_time_ms = result.get('kickOffTime')
                kick_off_time_s = kick_off_time_ms / 1000
                kick_off_datetime = datetime.fromtimestamp(kick_off_time_s)
                formatted_time = kick_off_datetime.strftime('%d-%m-%Y %H:%M:%S')
                home = result.get('home')
                #home = home.replace('FC', '').replace('SC', ' ')
                away = result.get('away')
                #away = away.replace('FC', '').replace('SC', ' ')
                odds = result.get('odds', {})
                kvote = {key: odds.get(key, 1) for key in keys}
                match_info = {
                    'ID': match_id,
                    'vreme': formatted_time,
                    'domaci': home,
                    'gosti': away,
                }
                match_info.update(kvote)
            return match_info
    except asyncio.TimeoutError:
        print(f'Oktagon timeout: {match_id}')
        return None
    except Exception as e:
        print(f'Error fetching match_id {match_id}: {e}')
        return None

async def oktagon():
    async with aiohttp.ClientSession() as session:
        from liste import keys, head

        match_ids = fetch_match_ids()
        print("Oktagon:", len(match_ids))
        tasks = [fetch_and_process(session, match_id, keys) for match_id in match_ids]
        results = await asyncio.gather(*tasks)
        results = [result for result in results if result is not None]
        df = pd.DataFrame(results)  # results je lista rečnika
        # Ako vam je potrebna neka obrada, možete je dodati ovde
        df['vreme'] = pd.to_datetime(df['vreme'], format='%d-%m-%Y %H:%M:%S', errors='coerce')
        df = df.sort_values(by='vreme')
        df.columns = head
        df = df.replace(0, 1.0)
        df['ID'] = [f'Oktagon{i}' for i in range(len(df))]
        df.to_csv('/content/oktagon.csv', index=False, header=head)

if __name__ == "__main__":
    asyncio.run(oktagon())
